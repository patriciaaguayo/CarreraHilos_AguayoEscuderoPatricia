/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.carrerahilos;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.util.concurrent.atomic.AtomicInteger;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.plaf.basic.BasicProgressBarUI;

/**
 *
 * @author patriciaaguayo
 */
public class InterfazCarrera extends javax.swing.JFrame {

    /**
     * Creates new form InterfazCarrera
     */
    public InterfazCarrera() {
        initComponents();
        this.setResizable(false);
    }
    
    // Variables para controlar el botón de Start
    
    private AtomicInteger hilosTerminados = new AtomicInteger(0);
    private final int TOTAL_HILOS = 4;
    private boolean carreraEnCurso = false;
    
    // Métodos getter y setter para controlar el estado de la carrera
    
    public boolean isCarreraEnCurso() {
        return carreraEnCurso;
    }
    
    public void setCarreraEnCurso(boolean carreraEnCurso) {
        this.carreraEnCurso = carreraEnCurso;
    }
    
    // Personaje sonic
    
    public javax.swing.JLabel getSonic(){
        return Sonic;
    }
    
    // Personaje donkey kong
    
    public javax.swing.JLabel getDonkey(){
        return Donkey;
    }
    
    // Personaje Pacman fantasma
    
    public javax.swing.JLabel getFantasma(){
        return Fantasma;
    }
    
    // Personaje Toad
    
    public javax.swing.JLabel getToad(){
        return Toad;
    }
    
    // Meta
    
    public javax.swing.JLabel getMeta(){
        return Meta;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Logo = new javax.swing.JLabel();
        BotonSalir = new javax.swing.JLabel();
        BotonStart = new javax.swing.JLabel();
        Meta = new javax.swing.JLabel();
        Toad = new javax.swing.JLabel();
        Fantasma = new javax.swing.JLabel();
        Donkey = new javax.swing.JLabel();
        Sonic = new javax.swing.JLabel();
        Fondo = new javax.swing.JLabel();
        BarraToad = new javax.swing.JProgressBar();
        BarraSonic = new javax.swing.JProgressBar();
        BarraDonkey = new javax.swing.JProgressBar();
        BarraFantasma = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo.png"))); // NOI18N
        getContentPane().add(Logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 30, -1, -1));

        BotonSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/salir.png"))); // NOI18N
        BotonSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonSalirMouseClicked(evt);
            }
        });
        getContentPane().add(BotonSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 20, -1, -1));

        BotonStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/start.png"))); // NOI18N
        BotonStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonStartMouseClicked(evt);
            }
        });
        getContentPane().add(BotonStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));
        getContentPane().add(Meta, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 410, 20, 190));

        Toad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Reducida/Toad.png"))); // NOI18N
        getContentPane().add(Toad, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 530, -1, -1));

        Fantasma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Reducida/pacman.png"))); // NOI18N
        getContentPane().add(Fantasma, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 490, -1, -1));

        Donkey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Reducida/donkey.png"))); // NOI18N
        getContentPane().add(Donkey, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, -1, -1));

        Sonic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Reducida/sonic.png"))); // NOI18N
        getContentPane().add(Sonic, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 50, 60));

        Fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fondo2.png"))); // NOI18N
        getContentPane().add(Fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        BarraToad.setBackground(new java.awt.Color(204, 204, 255));
        getContentPane().add(BarraToad, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 450, 180, 150));

        BarraSonic.setBackground(new java.awt.Color(153, 255, 153));
        getContentPane().add(BarraSonic, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 0, 180, 150));

        BarraDonkey.setBackground(new java.awt.Color(255, 204, 204));
        getContentPane().add(BarraDonkey, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 150, 180, 150));

        BarraFantasma.setBackground(new java.awt.Color(255, 255, 153));
        getContentPane().add(BarraFantasma, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 300, 180, 150));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotonStartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonStartMouseClicked
        
        // Deshabilitar el botón de Start
        
        if (isCarreraEnCurso()) {
            return;
        }
        
        // Bloquear nuevas carreras
        
        setCarreraEnCurso(true);
        
        // Deshabilitar el botón de Start
        
        BotonStart.setEnabled(false);

        // Reestablecer las posiciones de los personajes
        
        Sonic.setLocation(0, Sonic.getLocation().y);
        Donkey.setLocation(0, Donkey .getLocation().y);
        Fantasma.setLocation(0, Fantasma.getLocation().y);
        Toad.setLocation(0, Toad.getLocation().y);
        
        // Configurar y resetear las barras de progreso
        
        configurarBarrasProgreso();
        
        // Resetear contador de hilos
        
        hilosTerminados.set(0);
        
        // Crear los hilos de los personajes
        
        Carrera hilo1 = new Carrera(Sonic, BarraSonic, this, "SONIC" );
        Carrera hilo2 = new Carrera(Donkey, BarraDonkey, this, "DONKEY" );
        Carrera hilo3 = new Carrera(Fantasma, BarraFantasma, this, "FANTASMA" );
        Carrera hilo4 = new Carrera(Toad, BarraToad, this , "TOAD");
        
        // Correr los hilos
        
        hilo1.start();
        hilo2.start();
        hilo3.start();
        hilo4.start();
    }//GEN-LAST:event_BotonStartMouseClicked

    private void BotonSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonSalirMouseClicked
        
        System.exit(0);
    }//GEN-LAST:event_BotonSalirMouseClicked
 
     // Resetear las barras de progreso
    
    private void configurarBarrasProgreso() {
    
        // Cambiar fuente y tamaño del texto
        
        Font fuentePersonalizada = new Font("Arial", Font.BOLD, 18); 
        
        // Configuración de la barra de Sonic
       
        BarraSonic.setValue(0);
        BarraSonic.setStringPainted(true);
        BarraSonic.setForeground(Color.decode("#FFFFFF"));  // Color del texto
        BarraSonic.setBackground(Color.decode("#A9C9FF")); // Color de fondo
        BarraSonic.setUI(new CustomProgressBarUI(Color.decode("#203CF3")));  // Color del progreso (parte llena)
        BarraSonic.setFont(fuentePersonalizada); // Cambia la letra de la barra
        
        // Configuración de la barra de Donkey Kong
        
        BarraDonkey.setValue(0);
        BarraDonkey.setStringPainted(true);
        BarraDonkey.setForeground(Color.decode("#FFFFFF"));  // Color del texto
        BarraDonkey.setBackground(Color.decode("#F9C58D")); // Color de fondo
        BarraDonkey.setUI(new CustomProgressBarUI(Color.decode("#D17E27"))); // Color del progreso (parte llena)
        BarraDonkey.setFont(fuentePersonalizada); // Cambia la letra de la barra
        
        // Configuración de la barra de Fantasma
        
        BarraFantasma.setValue(0);
        BarraFantasma.setStringPainted(true);
        BarraFantasma.setForeground(Color.decode("#FFFFFF"));  // Color del texto
        BarraFantasma.setBackground(Color.decode("#FBB5FF")); // Color de fondo
        BarraFantasma.setUI(new CustomProgressBarUI(Color.decode("#F885FF"))); // Color del progreso (parte llena)
        BarraFantasma.setFont(fuentePersonalizada); // Cambia la letra de la barra
        
        // Configuración de la barra de Toad
        
        BarraToad.setValue(0);
        BarraToad.setStringPainted(true);
        BarraToad.setForeground(Color.decode("#FFFFFF"));  // Color del texto
        BarraToad.setBackground(Color.decode("#EC9696")); // Color de fondo
        BarraToad.setUI(new CustomProgressBarUI(Color.decode("#E73A3A"))); // Color del progreso (parte llena)
        BarraToad.setFont(fuentePersonalizada); // Cambia la letra de la barra
        
    }
    
    // Clase personalizada para cambiar el color de la parte llena del JProgressBar
    
    private static class CustomProgressBarUI extends BasicProgressBarUI {
        private final Color progressColor;

        public CustomProgressBarUI(Color progressColor) {
            this.progressColor = progressColor;
        }

        @Override
        protected void paintDeterminate(Graphics g, JComponent c) {
            super.paintDeterminate(g, c);  // Llamar a super para que se dibuje la parte vacía y la base de la barra

            // Obtener las coordenadas y dimensiones de la barra de progreso
            
            Rectangle barRect = getBox(c);  // Esto te da el área total de la barra
            int width = (int) (getAmountFull(c, barRect) * barRect.width);  // Calculamos el ancho del progreso

            // Cambiar el color de la parte llena (progreso)
            
            g.setColor(progressColor);
            g.fillRect(barRect.x, barRect.y, width, barRect.height);  // Rellenamos la parte llena con el color

            // Esto asegura que el texto no sea cubierto por la parte del progreso
            
            String progressText = ((JProgressBar) c).getString();
            
            if (progressText != null) {
                
                FontMetrics metrics = g.getFontMetrics();
                int textWidth = metrics.stringWidth(progressText);
                int textHeight = metrics.getHeight();
                int x = (barRect.width - textWidth) / 2;
                int y = (barRect.height + textHeight) / 2 - metrics.getDescent();
                g.setColor(Color.WHITE); // Establecemos el color del texto
                g.drawString(progressText, barRect.x + x, barRect.y + y);
            }
        }
        
        protected Rectangle getBox(JComponent c) { // Aquí obtenemos el área total donde se dibuja el progreso
           
            return new Rectangle(0, 0, c.getWidth(), c.getHeight());
        }

        // Método para calcular la cantidad de progreso
        
        protected float getAmountFull(JComponent c, Rectangle barRect) {
            JProgressBar progressBar = (JProgressBar) c;
            return (float) progressBar.getValue() / progressBar.getMaximum();
        }
    }
    
    // Método para notificar que un hilo ha terminado
    
    public synchronized void notificarHiloTerminado() {
        
        // Incrementar el contador de hilos terminados
        
        int terminados = hilosTerminados.incrementAndGet();

        if (terminados == TOTAL_HILOS) {

            setCarreraEnCurso(false);
            BotonStart.setEnabled(true);
            hilosTerminados.set(0);

            JOptionPane.showMessageDialog(null, "La carrera ha terminado. ¡Puedes iniciar otra!");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazCarrera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazCarrera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazCarrera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazCarrera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazCarrera().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar BarraDonkey;
    private javax.swing.JProgressBar BarraFantasma;
    private javax.swing.JProgressBar BarraSonic;
    private javax.swing.JProgressBar BarraToad;
    private javax.swing.JLabel BotonSalir;
    private javax.swing.JLabel BotonStart;
    private javax.swing.JLabel Donkey;
    private javax.swing.JLabel Fantasma;
    private javax.swing.JLabel Fondo;
    private javax.swing.JLabel Logo;
    private javax.swing.JLabel Meta;
    private javax.swing.JLabel Sonic;
    private javax.swing.JLabel Toad;
    // End of variables declaration//GEN-END:variables
}
